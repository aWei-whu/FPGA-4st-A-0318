// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Merge,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.375750,HLS_SYN_LAT=9727,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=28,HLS_SYN_FF=9236,HLS_SYN_LUT=14354,HLS_VERSION=2018_3}" *)

module Merge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgs_V_address0,
        imgs_V_ce0,
        imgs_V_q0,
        imgs_V_address1,
        imgs_V_ce1,
        imgs_V_q1,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] imgs_V_address0;
output   imgs_V_ce0;
input  [15:0] imgs_V_q0;
output  [10:0] imgs_V_address1;
output   imgs_V_ce1;
input  [15:0] imgs_V_q1;
output  [7:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [15:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] imgs_V_address0;
reg imgs_V_ce0;
reg imgs_V_ce1;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten_reg_171;
reg   [8:0] i_i_reg_182;
reg   [15:0] p_i_reg_193;
reg   [2:0] n_i_reg_205;
reg   [63:0] imgs_weight_1_reg_350;
wire    ap_CS_fsm_state2;
wire    grp_cal_weight_fu_233_ap_ready;
wire    grp_cal_weight_fu_233_ap_done;
reg   [63:0] imgs_weight_2_reg_355;
reg   [63:0] imgs_weight_3_reg_360;
reg   [63:0] imgs_weight_4_reg_365;
reg   [63:0] imgs_weight_5_reg_370;
wire   [0:0] exitcond_flatten_fu_259_p2;
reg   [0:0] exitcond_flatten_reg_375;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_375_pp0_iter1_reg;
wire   [10:0] indvar_flatten_next_fu_265_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_i_fu_277_p2;
reg   [0:0] exitcond_i_reg_384;
wire   [2:0] n_i_mid2_fu_283_p3;
reg   [2:0] n_i_mid2_reg_389;
wire   [8:0] tmp_i_mid2_v_fu_291_p3;
reg   [8:0] tmp_i_mid2_v_reg_394;
wire   [63:0] tmp_i_mid2_fu_299_p1;
reg   [63:0] tmp_i_mid2_reg_399;
reg   [63:0] tmp_i_mid2_reg_399_pp0_iter1_reg;
wire   [2:0] n_fu_309_p2;
reg   [2:0] n_reg_434;
reg   [2:0] n_reg_434_pp0_iter1_reg;
wire   [15:0] temp_V_fu_339_p2;
reg   [15:0] temp_V_reg_440;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state4;
wire    grp_proc_tile_fu_216_ap_ready;
wire    grp_proc_tile_fu_216_ap_done;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter2;
reg   [7:0] imgs_tile_0_V_address0;
reg    imgs_tile_0_V_ce0;
reg    imgs_tile_0_V_we0;
wire   [15:0] imgs_tile_0_V_q0;
reg   [7:0] imgs_tile_1_V_address0;
reg    imgs_tile_1_V_ce0;
reg    imgs_tile_1_V_we0;
wire   [15:0] imgs_tile_1_V_q0;
reg   [7:0] imgs_tile_2_V_address0;
reg    imgs_tile_2_V_ce0;
reg    imgs_tile_2_V_we0;
wire   [15:0] imgs_tile_2_V_q0;
reg   [7:0] imgs_tile_3_V_address0;
reg    imgs_tile_3_V_ce0;
reg    imgs_tile_3_V_we0;
wire   [15:0] imgs_tile_3_V_q0;
reg   [7:0] imgs_tile_4_V_address0;
reg    imgs_tile_4_V_ce0;
reg    imgs_tile_4_V_we0;
wire   [15:0] imgs_tile_4_V_q0;
reg   [7:0] imgs_tile_5_V_address0;
reg    imgs_tile_5_V_ce0;
reg    imgs_tile_5_V_we0;
wire   [15:0] imgs_tile_5_V_q0;
wire    grp_proc_tile_fu_216_ap_start;
wire    grp_proc_tile_fu_216_ap_idle;
wire   [10:0] grp_proc_tile_fu_216_imgs_V_address0;
wire    grp_proc_tile_fu_216_imgs_V_ce0;
wire   [7:0] grp_proc_tile_fu_216_output_0_V_address0;
wire    grp_proc_tile_fu_216_output_0_V_ce0;
wire    grp_proc_tile_fu_216_output_0_V_we0;
wire   [15:0] grp_proc_tile_fu_216_output_0_V_d0;
wire   [7:0] grp_proc_tile_fu_216_output_1_V_address0;
wire    grp_proc_tile_fu_216_output_1_V_ce0;
wire    grp_proc_tile_fu_216_output_1_V_we0;
wire   [15:0] grp_proc_tile_fu_216_output_1_V_d0;
wire   [7:0] grp_proc_tile_fu_216_output_2_V_address0;
wire    grp_proc_tile_fu_216_output_2_V_ce0;
wire    grp_proc_tile_fu_216_output_2_V_we0;
wire   [15:0] grp_proc_tile_fu_216_output_2_V_d0;
wire   [7:0] grp_proc_tile_fu_216_output_3_V_address0;
wire    grp_proc_tile_fu_216_output_3_V_ce0;
wire    grp_proc_tile_fu_216_output_3_V_we0;
wire   [15:0] grp_proc_tile_fu_216_output_3_V_d0;
wire   [7:0] grp_proc_tile_fu_216_output_4_V_address0;
wire    grp_proc_tile_fu_216_output_4_V_ce0;
wire    grp_proc_tile_fu_216_output_4_V_we0;
wire   [15:0] grp_proc_tile_fu_216_output_4_V_d0;
wire   [7:0] grp_proc_tile_fu_216_output_5_V_address0;
wire    grp_proc_tile_fu_216_output_5_V_ce0;
wire    grp_proc_tile_fu_216_output_5_V_we0;
wire   [15:0] grp_proc_tile_fu_216_output_5_V_d0;
wire    grp_cal_weight_fu_233_ap_start;
wire    grp_cal_weight_fu_233_ap_idle;
wire   [10:0] grp_cal_weight_fu_233_imgs_V_address0;
wire    grp_cal_weight_fu_233_imgs_V_ce0;
wire   [10:0] grp_cal_weight_fu_233_imgs_V_address1;
wire    grp_cal_weight_fu_233_imgs_V_ce1;
wire   [63:0] grp_cal_weight_fu_233_ap_return_0;
wire   [63:0] grp_cal_weight_fu_233_ap_return_1;
wire   [63:0] grp_cal_weight_fu_233_ap_return_2;
wire   [63:0] grp_cal_weight_fu_233_ap_return_3;
wire   [63:0] grp_cal_weight_fu_233_ap_return_4;
reg   [8:0] ap_phi_mux_i_i_phi_fu_186_p4;
wire    ap_block_pp0_stage0;
reg   [15:0] ap_phi_mux_p_i_phi_fu_197_p4;
reg   [2:0] ap_phi_mux_n_i_phi_fu_209_p4;
reg    grp_proc_tile_fu_216_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    grp_cal_weight_fu_233_ap_start_reg;
wire   [0:0] ifzero_fu_345_p2;
wire   [8:0] i_fu_271_p2;
wire   [15:0] p_i_mid2_fu_315_p3;
wire   [15:0] tmp_fu_322_p8;
wire    ap_CS_fsm_state8;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 grp_proc_tile_fu_216_ap_start_reg = 1'b0;
#0 grp_cal_weight_fu_233_ap_start_reg = 1'b0;
end

Merge_imgs_tile_0_V #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
imgs_tile_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(imgs_tile_0_V_address0),
    .ce0(imgs_tile_0_V_ce0),
    .we0(imgs_tile_0_V_we0),
    .d0(grp_proc_tile_fu_216_output_0_V_d0),
    .q0(imgs_tile_0_V_q0)
);

Merge_imgs_tile_0_V #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
imgs_tile_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(imgs_tile_1_V_address0),
    .ce0(imgs_tile_1_V_ce0),
    .we0(imgs_tile_1_V_we0),
    .d0(grp_proc_tile_fu_216_output_1_V_d0),
    .q0(imgs_tile_1_V_q0)
);

Merge_imgs_tile_0_V #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
imgs_tile_2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(imgs_tile_2_V_address0),
    .ce0(imgs_tile_2_V_ce0),
    .we0(imgs_tile_2_V_we0),
    .d0(grp_proc_tile_fu_216_output_2_V_d0),
    .q0(imgs_tile_2_V_q0)
);

Merge_imgs_tile_0_V #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
imgs_tile_3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(imgs_tile_3_V_address0),
    .ce0(imgs_tile_3_V_ce0),
    .we0(imgs_tile_3_V_we0),
    .d0(grp_proc_tile_fu_216_output_3_V_d0),
    .q0(imgs_tile_3_V_q0)
);

Merge_imgs_tile_0_V #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
imgs_tile_4_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(imgs_tile_4_V_address0),
    .ce0(imgs_tile_4_V_ce0),
    .we0(imgs_tile_4_V_we0),
    .d0(grp_proc_tile_fu_216_output_4_V_d0),
    .q0(imgs_tile_4_V_q0)
);

Merge_imgs_tile_0_V #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
imgs_tile_5_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(imgs_tile_5_V_address0),
    .ce0(imgs_tile_5_V_ce0),
    .we0(imgs_tile_5_V_we0),
    .d0(grp_proc_tile_fu_216_output_5_V_d0),
    .q0(imgs_tile_5_V_q0)
);

proc_tile grp_proc_tile_fu_216(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_proc_tile_fu_216_ap_start),
    .ap_done(grp_proc_tile_fu_216_ap_done),
    .ap_idle(grp_proc_tile_fu_216_ap_idle),
    .ap_ready(grp_proc_tile_fu_216_ap_ready),
    .imgs_V_address0(grp_proc_tile_fu_216_imgs_V_address0),
    .imgs_V_ce0(grp_proc_tile_fu_216_imgs_V_ce0),
    .imgs_V_q0(imgs_V_q0),
    .weight_1_read(imgs_weight_1_reg_350),
    .weight_2_read(imgs_weight_2_reg_355),
    .weight_3_read(imgs_weight_3_reg_360),
    .weight_4_read(imgs_weight_4_reg_365),
    .weight_5_read(imgs_weight_5_reg_370),
    .output_0_V_address0(grp_proc_tile_fu_216_output_0_V_address0),
    .output_0_V_ce0(grp_proc_tile_fu_216_output_0_V_ce0),
    .output_0_V_we0(grp_proc_tile_fu_216_output_0_V_we0),
    .output_0_V_d0(grp_proc_tile_fu_216_output_0_V_d0),
    .output_1_V_address0(grp_proc_tile_fu_216_output_1_V_address0),
    .output_1_V_ce0(grp_proc_tile_fu_216_output_1_V_ce0),
    .output_1_V_we0(grp_proc_tile_fu_216_output_1_V_we0),
    .output_1_V_d0(grp_proc_tile_fu_216_output_1_V_d0),
    .output_2_V_address0(grp_proc_tile_fu_216_output_2_V_address0),
    .output_2_V_ce0(grp_proc_tile_fu_216_output_2_V_ce0),
    .output_2_V_we0(grp_proc_tile_fu_216_output_2_V_we0),
    .output_2_V_d0(grp_proc_tile_fu_216_output_2_V_d0),
    .output_3_V_address0(grp_proc_tile_fu_216_output_3_V_address0),
    .output_3_V_ce0(grp_proc_tile_fu_216_output_3_V_ce0),
    .output_3_V_we0(grp_proc_tile_fu_216_output_3_V_we0),
    .output_3_V_d0(grp_proc_tile_fu_216_output_3_V_d0),
    .output_4_V_address0(grp_proc_tile_fu_216_output_4_V_address0),
    .output_4_V_ce0(grp_proc_tile_fu_216_output_4_V_ce0),
    .output_4_V_we0(grp_proc_tile_fu_216_output_4_V_we0),
    .output_4_V_d0(grp_proc_tile_fu_216_output_4_V_d0),
    .output_5_V_address0(grp_proc_tile_fu_216_output_5_V_address0),
    .output_5_V_ce0(grp_proc_tile_fu_216_output_5_V_ce0),
    .output_5_V_we0(grp_proc_tile_fu_216_output_5_V_we0),
    .output_5_V_d0(grp_proc_tile_fu_216_output_5_V_d0)
);

cal_weight grp_cal_weight_fu_233(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_cal_weight_fu_233_ap_start),
    .ap_done(grp_cal_weight_fu_233_ap_done),
    .ap_idle(grp_cal_weight_fu_233_ap_idle),
    .ap_ready(grp_cal_weight_fu_233_ap_ready),
    .imgs_V_address0(grp_cal_weight_fu_233_imgs_V_address0),
    .imgs_V_ce0(grp_cal_weight_fu_233_imgs_V_ce0),
    .imgs_V_q0(imgs_V_q0),
    .imgs_V_address1(grp_cal_weight_fu_233_imgs_V_address1),
    .imgs_V_ce1(grp_cal_weight_fu_233_imgs_V_ce1),
    .imgs_V_q1(imgs_V_q1),
    .ap_return_0(grp_cal_weight_fu_233_ap_return_0),
    .ap_return_1(grp_cal_weight_fu_233_ap_return_1),
    .ap_return_2(grp_cal_weight_fu_233_ap_return_2),
    .ap_return_3(grp_cal_weight_fu_233_ap_return_3),
    .ap_return_4(grp_cal_weight_fu_233_ap_return_4)
);

Merge_mux_63_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
Merge_mux_63_16_1_1_U28(
    .din0(imgs_tile_0_V_q0),
    .din1(imgs_tile_1_V_q0),
    .din2(imgs_tile_2_V_q0),
    .din3(imgs_tile_3_V_q0),
    .din4(imgs_tile_4_V_q0),
    .din5(imgs_tile_5_V_q0),
    .din6(n_i_mid2_reg_389),
    .dout(tmp_fu_322_p8)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (grp_proc_tile_fu_216_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state4) & (grp_proc_tile_fu_216_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_cal_weight_fu_233_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_cal_weight_fu_233_ap_start_reg <= 1'b1;
        end else if ((grp_cal_weight_fu_233_ap_ready == 1'b1)) begin
            grp_cal_weight_fu_233_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_proc_tile_fu_216_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_proc_tile_fu_216_ap_start_reg <= 1'b1;
        end else if ((grp_proc_tile_fu_216_ap_ready == 1'b1)) begin
            grp_proc_tile_fu_216_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_375 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_i_reg_182 <= tmp_i_mid2_v_reg_394;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_proc_tile_fu_216_ap_done == 1'b1))) begin
        i_i_reg_182 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_171 <= indvar_flatten_next_fu_265_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_proc_tile_fu_216_ap_done == 1'b1))) begin
        indvar_flatten_reg_171 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_375 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        n_i_reg_205 <= n_reg_434;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_proc_tile_fu_216_ap_done == 1'b1))) begin
        n_i_reg_205 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_375_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_i_reg_193 <= temp_V_reg_440;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_proc_tile_fu_216_ap_done == 1'b1))) begin
        p_i_reg_193 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_375 <= exitcond_flatten_fu_259_p2;
        exitcond_flatten_reg_375_pp0_iter1_reg <= exitcond_flatten_reg_375;
        n_reg_434_pp0_iter1_reg <= n_reg_434;
        tmp_i_mid2_reg_399_pp0_iter1_reg[8 : 0] <= tmp_i_mid2_reg_399[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_i_reg_384 <= exitcond_i_fu_277_p2;
        n_i_mid2_reg_389 <= n_i_mid2_fu_283_p3;
        tmp_i_mid2_reg_399[8 : 0] <= tmp_i_mid2_fu_299_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_cal_weight_fu_233_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        imgs_weight_1_reg_350 <= grp_cal_weight_fu_233_ap_return_0;
        imgs_weight_2_reg_355 <= grp_cal_weight_fu_233_ap_return_1;
        imgs_weight_3_reg_360 <= grp_cal_weight_fu_233_ap_return_2;
        imgs_weight_4_reg_365 <= grp_cal_weight_fu_233_ap_return_3;
        imgs_weight_5_reg_370 <= grp_cal_weight_fu_233_ap_return_4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_reg_434 <= n_fu_309_p2;
        tmp_i_mid2_v_reg_394 <= tmp_i_mid2_v_fu_291_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_375 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        temp_V_reg_440 <= temp_V_fu_339_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_259_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_375 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_i_phi_fu_186_p4 = tmp_i_mid2_v_reg_394;
    end else begin
        ap_phi_mux_i_i_phi_fu_186_p4 = i_i_reg_182;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_375 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_n_i_phi_fu_209_p4 = n_reg_434;
    end else begin
        ap_phi_mux_n_i_phi_fu_209_p4 = n_i_reg_205;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_375_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_p_i_phi_fu_197_p4 = temp_V_reg_440;
    end else begin
        ap_phi_mux_p_i_phi_fu_197_p4 = p_i_reg_193;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        imgs_V_address0 = grp_cal_weight_fu_233_imgs_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_V_address0 = grp_proc_tile_fu_216_imgs_V_address0;
    end else begin
        imgs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        imgs_V_ce0 = grp_cal_weight_fu_233_imgs_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_V_ce0 = grp_proc_tile_fu_216_imgs_V_ce0;
    end else begin
        imgs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        imgs_V_ce1 = grp_cal_weight_fu_233_imgs_V_ce1;
    end else begin
        imgs_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_0_V_address0 = tmp_i_mid2_fu_299_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_0_V_address0 = grp_proc_tile_fu_216_output_0_V_address0;
    end else begin
        imgs_tile_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_0_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_0_V_ce0 = grp_proc_tile_fu_216_output_0_V_ce0;
    end else begin
        imgs_tile_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_0_V_we0 = grp_proc_tile_fu_216_output_0_V_we0;
    end else begin
        imgs_tile_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_1_V_address0 = tmp_i_mid2_fu_299_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_1_V_address0 = grp_proc_tile_fu_216_output_1_V_address0;
    end else begin
        imgs_tile_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_1_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_1_V_ce0 = grp_proc_tile_fu_216_output_1_V_ce0;
    end else begin
        imgs_tile_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_1_V_we0 = grp_proc_tile_fu_216_output_1_V_we0;
    end else begin
        imgs_tile_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_2_V_address0 = tmp_i_mid2_fu_299_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_2_V_address0 = grp_proc_tile_fu_216_output_2_V_address0;
    end else begin
        imgs_tile_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_2_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_2_V_ce0 = grp_proc_tile_fu_216_output_2_V_ce0;
    end else begin
        imgs_tile_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_2_V_we0 = grp_proc_tile_fu_216_output_2_V_we0;
    end else begin
        imgs_tile_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_3_V_address0 = tmp_i_mid2_fu_299_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_3_V_address0 = grp_proc_tile_fu_216_output_3_V_address0;
    end else begin
        imgs_tile_3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_3_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_3_V_ce0 = grp_proc_tile_fu_216_output_3_V_ce0;
    end else begin
        imgs_tile_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_3_V_we0 = grp_proc_tile_fu_216_output_3_V_we0;
    end else begin
        imgs_tile_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_4_V_address0 = tmp_i_mid2_fu_299_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_4_V_address0 = grp_proc_tile_fu_216_output_4_V_address0;
    end else begin
        imgs_tile_4_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_4_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_4_V_ce0 = grp_proc_tile_fu_216_output_4_V_ce0;
    end else begin
        imgs_tile_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_4_V_we0 = grp_proc_tile_fu_216_output_4_V_we0;
    end else begin
        imgs_tile_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_5_V_address0 = tmp_i_mid2_fu_299_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_5_V_address0 = grp_proc_tile_fu_216_output_5_V_address0;
    end else begin
        imgs_tile_5_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_tile_5_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_5_V_ce0 = grp_proc_tile_fu_216_output_5_V_ce0;
    end else begin
        imgs_tile_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_tile_5_V_we0 = grp_proc_tile_fu_216_output_5_V_we0;
    end else begin
        imgs_tile_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ifzero_fu_345_p2 == 1'd1))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_cal_weight_fu_233_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_proc_tile_fu_216_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_259_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_flatten_fu_259_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_259_p2 = ((indvar_flatten_reg_171 == 11'd1536) ? 1'b1 : 1'b0);

assign exitcond_i_fu_277_p2 = ((ap_phi_mux_n_i_phi_fu_209_p4 == 3'd6) ? 1'b1 : 1'b0);

assign grp_cal_weight_fu_233_ap_start = grp_cal_weight_fu_233_ap_start_reg;

assign grp_proc_tile_fu_216_ap_start = grp_proc_tile_fu_216_ap_start_reg;

assign i_fu_271_p2 = (ap_phi_mux_i_i_phi_fu_186_p4 + 9'd1);

assign ifzero_fu_345_p2 = ((n_reg_434_pp0_iter1_reg == 3'd6) ? 1'b1 : 1'b0);

assign imgs_V_address1 = grp_cal_weight_fu_233_imgs_V_address1;

assign indvar_flatten_next_fu_265_p2 = (indvar_flatten_reg_171 + 11'd1);

assign n_fu_309_p2 = (n_i_mid2_fu_283_p3 + 3'd1);

assign n_i_mid2_fu_283_p3 = ((exitcond_i_fu_277_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_n_i_phi_fu_209_p4);

assign output_V_address0 = tmp_i_mid2_reg_399_pp0_iter1_reg;

assign output_V_d0 = temp_V_reg_440;

assign p_i_mid2_fu_315_p3 = ((exitcond_i_reg_384[0:0] === 1'b1) ? 16'd0 : ap_phi_mux_p_i_phi_fu_197_p4);

assign temp_V_fu_339_p2 = (p_i_mid2_fu_315_p3 + tmp_fu_322_p8);

assign tmp_i_mid2_fu_299_p1 = tmp_i_mid2_v_fu_291_p3;

assign tmp_i_mid2_v_fu_291_p3 = ((exitcond_i_fu_277_p2[0:0] === 1'b1) ? i_fu_271_p2 : ap_phi_mux_i_i_phi_fu_186_p4);

always @ (posedge ap_clk) begin
    tmp_i_mid2_reg_399[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    tmp_i_mid2_reg_399_pp0_iter1_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //Merge
