// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cal_weight (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgs_V_address0,
        imgs_V_ce0,
        imgs_V_q0,
        imgs_V_address1,
        imgs_V_ce1,
        imgs_V_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 120'd1;
parameter    ap_ST_fsm_pp0_stage0 = 120'd2;
parameter    ap_ST_fsm_pp0_stage1 = 120'd4;
parameter    ap_ST_fsm_pp0_stage2 = 120'd8;
parameter    ap_ST_fsm_pp0_stage3 = 120'd16;
parameter    ap_ST_fsm_pp0_stage4 = 120'd32;
parameter    ap_ST_fsm_state15 = 120'd64;
parameter    ap_ST_fsm_state16 = 120'd128;
parameter    ap_ST_fsm_state17 = 120'd256;
parameter    ap_ST_fsm_state18 = 120'd512;
parameter    ap_ST_fsm_state19 = 120'd1024;
parameter    ap_ST_fsm_state20 = 120'd2048;
parameter    ap_ST_fsm_state21 = 120'd4096;
parameter    ap_ST_fsm_state22 = 120'd8192;
parameter    ap_ST_fsm_state23 = 120'd16384;
parameter    ap_ST_fsm_state24 = 120'd32768;
parameter    ap_ST_fsm_state25 = 120'd65536;
parameter    ap_ST_fsm_state26 = 120'd131072;
parameter    ap_ST_fsm_state27 = 120'd262144;
parameter    ap_ST_fsm_state28 = 120'd524288;
parameter    ap_ST_fsm_state29 = 120'd1048576;
parameter    ap_ST_fsm_state30 = 120'd2097152;
parameter    ap_ST_fsm_state31 = 120'd4194304;
parameter    ap_ST_fsm_state32 = 120'd8388608;
parameter    ap_ST_fsm_state33 = 120'd16777216;
parameter    ap_ST_fsm_pp1_stage0 = 120'd33554432;
parameter    ap_ST_fsm_pp1_stage1 = 120'd67108864;
parameter    ap_ST_fsm_pp1_stage2 = 120'd134217728;
parameter    ap_ST_fsm_pp1_stage3 = 120'd268435456;
parameter    ap_ST_fsm_pp1_stage4 = 120'd536870912;
parameter    ap_ST_fsm_state47 = 120'd1073741824;
parameter    ap_ST_fsm_state48 = 120'd2147483648;
parameter    ap_ST_fsm_state49 = 120'd4294967296;
parameter    ap_ST_fsm_state50 = 120'd8589934592;
parameter    ap_ST_fsm_state51 = 120'd17179869184;
parameter    ap_ST_fsm_state52 = 120'd34359738368;
parameter    ap_ST_fsm_state53 = 120'd68719476736;
parameter    ap_ST_fsm_state54 = 120'd137438953472;
parameter    ap_ST_fsm_state55 = 120'd274877906944;
parameter    ap_ST_fsm_state56 = 120'd549755813888;
parameter    ap_ST_fsm_state57 = 120'd1099511627776;
parameter    ap_ST_fsm_state58 = 120'd2199023255552;
parameter    ap_ST_fsm_state59 = 120'd4398046511104;
parameter    ap_ST_fsm_state60 = 120'd8796093022208;
parameter    ap_ST_fsm_state61 = 120'd17592186044416;
parameter    ap_ST_fsm_state62 = 120'd35184372088832;
parameter    ap_ST_fsm_state63 = 120'd70368744177664;
parameter    ap_ST_fsm_state64 = 120'd140737488355328;
parameter    ap_ST_fsm_state65 = 120'd281474976710656;
parameter    ap_ST_fsm_pp2_stage0 = 120'd562949953421312;
parameter    ap_ST_fsm_pp2_stage1 = 120'd1125899906842624;
parameter    ap_ST_fsm_pp2_stage2 = 120'd2251799813685248;
parameter    ap_ST_fsm_pp2_stage3 = 120'd4503599627370496;
parameter    ap_ST_fsm_pp2_stage4 = 120'd9007199254740992;
parameter    ap_ST_fsm_state79 = 120'd18014398509481984;
parameter    ap_ST_fsm_state80 = 120'd36028797018963968;
parameter    ap_ST_fsm_state81 = 120'd72057594037927936;
parameter    ap_ST_fsm_state82 = 120'd144115188075855872;
parameter    ap_ST_fsm_state83 = 120'd288230376151711744;
parameter    ap_ST_fsm_state84 = 120'd576460752303423488;
parameter    ap_ST_fsm_state85 = 120'd1152921504606846976;
parameter    ap_ST_fsm_state86 = 120'd2305843009213693952;
parameter    ap_ST_fsm_state87 = 120'd4611686018427387904;
parameter    ap_ST_fsm_state88 = 120'd9223372036854775808;
parameter    ap_ST_fsm_state89 = 120'd18446744073709551616;
parameter    ap_ST_fsm_state90 = 120'd36893488147419103232;
parameter    ap_ST_fsm_state91 = 120'd73786976294838206464;
parameter    ap_ST_fsm_state92 = 120'd147573952589676412928;
parameter    ap_ST_fsm_state93 = 120'd295147905179352825856;
parameter    ap_ST_fsm_state94 = 120'd590295810358705651712;
parameter    ap_ST_fsm_state95 = 120'd1180591620717411303424;
parameter    ap_ST_fsm_state96 = 120'd2361183241434822606848;
parameter    ap_ST_fsm_state97 = 120'd4722366482869645213696;
parameter    ap_ST_fsm_pp3_stage0 = 120'd9444732965739290427392;
parameter    ap_ST_fsm_pp3_stage1 = 120'd18889465931478580854784;
parameter    ap_ST_fsm_pp3_stage2 = 120'd37778931862957161709568;
parameter    ap_ST_fsm_pp3_stage3 = 120'd75557863725914323419136;
parameter    ap_ST_fsm_pp3_stage4 = 120'd151115727451828646838272;
parameter    ap_ST_fsm_state111 = 120'd302231454903657293676544;
parameter    ap_ST_fsm_state112 = 120'd604462909807314587353088;
parameter    ap_ST_fsm_state113 = 120'd1208925819614629174706176;
parameter    ap_ST_fsm_state114 = 120'd2417851639229258349412352;
parameter    ap_ST_fsm_state115 = 120'd4835703278458516698824704;
parameter    ap_ST_fsm_state116 = 120'd9671406556917033397649408;
parameter    ap_ST_fsm_state117 = 120'd19342813113834066795298816;
parameter    ap_ST_fsm_state118 = 120'd38685626227668133590597632;
parameter    ap_ST_fsm_state119 = 120'd77371252455336267181195264;
parameter    ap_ST_fsm_state120 = 120'd154742504910672534362390528;
parameter    ap_ST_fsm_state121 = 120'd309485009821345068724781056;
parameter    ap_ST_fsm_state122 = 120'd618970019642690137449562112;
parameter    ap_ST_fsm_state123 = 120'd1237940039285380274899124224;
parameter    ap_ST_fsm_state124 = 120'd2475880078570760549798248448;
parameter    ap_ST_fsm_state125 = 120'd4951760157141521099596496896;
parameter    ap_ST_fsm_state126 = 120'd9903520314283042199192993792;
parameter    ap_ST_fsm_state127 = 120'd19807040628566084398385987584;
parameter    ap_ST_fsm_state128 = 120'd39614081257132168796771975168;
parameter    ap_ST_fsm_state129 = 120'd79228162514264337593543950336;
parameter    ap_ST_fsm_pp4_stage0 = 120'd158456325028528675187087900672;
parameter    ap_ST_fsm_pp4_stage1 = 120'd316912650057057350374175801344;
parameter    ap_ST_fsm_pp4_stage2 = 120'd633825300114114700748351602688;
parameter    ap_ST_fsm_pp4_stage3 = 120'd1267650600228229401496703205376;
parameter    ap_ST_fsm_pp4_stage4 = 120'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state143 = 120'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state144 = 120'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state145 = 120'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state146 = 120'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state147 = 120'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state148 = 120'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state149 = 120'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state150 = 120'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state151 = 120'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state152 = 120'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state153 = 120'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state154 = 120'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state155 = 120'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state156 = 120'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state157 = 120'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state158 = 120'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state159 = 120'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state160 = 120'd664613997892457936451903530140172288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] imgs_V_address0;
output   imgs_V_ce0;
input  [15:0] imgs_V_q0;
output  [10:0] imgs_V_address1;
output   imgs_V_ce1;
input  [15:0] imgs_V_q1;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] ap_return_3;
output  [63:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] imgs_V_address0;
reg imgs_V_ce0;
reg[10:0] imgs_V_address1;
reg imgs_V_ce1;

(* fsm_encoding = "none" *) reg   [119:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] sum_1_reg_169;
reg   [8:0] i_reg_181;
reg   [63:0] sum_1_1_reg_192;
reg   [8:0] i_1_reg_202;
reg   [63:0] sum_1_2_reg_213;
reg   [8:0] i_s_reg_223;
reg   [63:0] sum_1_3_reg_234;
reg   [8:0] i_3_reg_244;
reg   [63:0] sum_1_4_reg_255;
reg   [8:0] i_4_reg_265;
wire   [63:0] grp_fu_302_p1;
reg   [63:0] reg_305;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] exitcond_reg_1302;
reg   [0:0] exitcond_reg_1302_pp0_iter1_reg;
wire    ap_CS_fsm_pp1_stage2;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state36_pp1_stage2_iter0;
wire    ap_block_state41_pp1_stage2_iter1;
wire    ap_block_state46_pp1_stage2_iter2;
wire    ap_block_pp1_stage2_11001;
reg   [0:0] exitcond_1_reg_1343;
reg   [0:0] exitcond_1_reg_1343_pp1_iter1_reg;
wire    ap_CS_fsm_pp2_stage2;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state68_pp2_stage2_iter0;
wire    ap_block_state73_pp2_stage2_iter1;
wire    ap_block_state78_pp2_stage2_iter2;
wire    ap_block_pp2_stage2_11001;
reg   [0:0] exitcond_2_reg_1384;
reg   [0:0] exitcond_2_reg_1384_pp2_iter1_reg;
wire    ap_CS_fsm_pp3_stage2;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_state100_pp3_stage2_iter0;
wire    ap_block_state105_pp3_stage2_iter1;
wire    ap_block_state110_pp3_stage2_iter2;
wire    ap_block_pp3_stage2_11001;
reg   [0:0] exitcond_3_reg_1425;
reg   [0:0] exitcond_3_reg_1425_pp3_iter1_reg;
wire    ap_CS_fsm_pp4_stage2;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state132_pp4_stage2_iter0;
wire    ap_block_state137_pp4_stage2_iter1;
wire    ap_block_state142_pp4_stage2_iter2;
wire    ap_block_pp4_stage2_11001;
reg   [0:0] exitcond_4_reg_1466;
reg   [0:0] exitcond_4_reg_1466_pp4_iter1_reg;
wire   [63:0] grp_fu_276_p2;
reg   [63:0] reg_310;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_reg_1302_pp0_iter2_reg;
wire    ap_CS_fsm_state25;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond_1_reg_1343_pp1_iter2_reg;
wire    ap_CS_fsm_state57;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] exitcond_2_reg_1384_pp2_iter2_reg;
wire    ap_CS_fsm_state89;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] exitcond_3_reg_1425_pp3_iter2_reg;
wire    ap_CS_fsm_state121;
reg    ap_enable_reg_pp4_iter2;
reg   [0:0] exitcond_4_reg_1466_pp4_iter2_reg;
wire    ap_CS_fsm_state153;
wire   [63:0] grp_fu_286_p2;
reg   [63:0] reg_320;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state148;
wire    ap_CS_fsm_state159;
wire   [0:0] exitcond_fu_326_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] i_2_fu_332_p2;
reg   [8:0] i_2_reg_1306;
reg    ap_enable_reg_pp0_iter0;
wire   [16:0] abs_fu_406_p3;
reg   [16:0] abs_reg_1321;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire  signed [31:0] tmp_64_fu_414_p1;
wire   [63:0] res_3_i_i_fu_468_p3;
reg   [63:0] res_3_i_i_reg_1331;
wire    ap_CS_fsm_state32;
wire   [63:0] weight_1_write_assi_fu_517_p3;
reg   [63:0] weight_1_write_assi_reg_1338;
wire    ap_CS_fsm_state33;
wire   [0:0] exitcond_1_fu_525_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state34_pp1_stage0_iter0;
wire    ap_block_state39_pp1_stage0_iter1;
wire    ap_block_state44_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [8:0] i_2_1_fu_531_p2;
reg   [8:0] i_2_1_reg_1347;
reg    ap_enable_reg_pp1_iter0;
wire   [16:0] abs_1_fu_605_p3;
reg   [16:0] abs_1_reg_1362;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state35_pp1_stage1_iter0;
wire    ap_block_state40_pp1_stage1_iter1;
wire    ap_block_state45_pp1_stage1_iter2;
wire    ap_block_pp1_stage1_11001;
wire  signed [31:0] tmp_56_s_fu_613_p1;
wire   [63:0] res_3_i_i1_fu_667_p3;
reg   [63:0] res_3_i_i1_reg_1372;
wire    ap_CS_fsm_state64;
wire   [63:0] weight_2_write_assi_fu_716_p3;
reg   [63:0] weight_2_write_assi_reg_1379;
wire    ap_CS_fsm_state65;
wire   [0:0] exitcond_2_fu_724_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state66_pp2_stage0_iter0;
wire    ap_block_state71_pp2_stage0_iter1;
wire    ap_block_state76_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
wire   [8:0] i_2_2_fu_730_p2;
reg   [8:0] i_2_2_reg_1388;
reg    ap_enable_reg_pp2_iter0;
wire   [16:0] abs_2_fu_804_p3;
reg   [16:0] abs_2_reg_1403;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state67_pp2_stage1_iter0;
wire    ap_block_state72_pp2_stage1_iter1;
wire    ap_block_state77_pp2_stage1_iter2;
wire    ap_block_pp2_stage1_11001;
wire  signed [31:0] tmp_56_5_fu_812_p1;
wire   [63:0] res_3_i_i2_fu_866_p3;
reg   [63:0] res_3_i_i2_reg_1413;
wire    ap_CS_fsm_state96;
wire   [63:0] weight_3_write_assi_fu_915_p3;
reg   [63:0] weight_3_write_assi_reg_1420;
wire    ap_CS_fsm_state97;
wire   [0:0] exitcond_3_fu_923_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state98_pp3_stage0_iter0;
wire    ap_block_state103_pp3_stage0_iter1;
wire    ap_block_state108_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
wire   [8:0] i_2_3_fu_929_p2;
reg   [8:0] i_2_3_reg_1429;
reg    ap_enable_reg_pp3_iter0;
wire   [16:0] abs_3_fu_1003_p3;
reg   [16:0] abs_3_reg_1444;
wire    ap_CS_fsm_pp3_stage1;
wire    ap_block_state99_pp3_stage1_iter0;
wire    ap_block_state104_pp3_stage1_iter1;
wire    ap_block_state109_pp3_stage1_iter2;
wire    ap_block_pp3_stage1_11001;
wire  signed [31:0] tmp_56_6_fu_1011_p1;
wire   [63:0] res_3_i_i3_fu_1065_p3;
reg   [63:0] res_3_i_i3_reg_1454;
wire    ap_CS_fsm_state128;
wire   [63:0] weight_4_write_assi_fu_1114_p3;
reg   [63:0] weight_4_write_assi_reg_1461;
wire    ap_CS_fsm_state129;
wire   [0:0] exitcond_4_fu_1122_p2;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state130_pp4_stage0_iter0;
wire    ap_block_state135_pp4_stage0_iter1;
wire    ap_block_state140_pp4_stage0_iter2;
wire    ap_block_pp4_stage0_11001;
wire   [8:0] i_2_4_fu_1128_p2;
reg   [8:0] i_2_4_reg_1470;
reg    ap_enable_reg_pp4_iter0;
wire   [16:0] abs_4_fu_1202_p3;
reg   [16:0] abs_4_reg_1485;
wire    ap_CS_fsm_pp4_stage1;
wire    ap_block_state131_pp4_stage1_iter0;
wire    ap_block_state136_pp4_stage1_iter1;
wire    ap_block_state141_pp4_stage1_iter2;
wire    ap_block_pp4_stage1_11001;
wire  signed [31:0] tmp_56_7_fu_1210_p1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_subdone;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state34;
wire    ap_block_state38_pp1_stage4_iter0;
wire    ap_block_state43_pp1_stage4_iter1;
wire    ap_block_pp1_stage4_subdone;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state66;
wire    ap_block_state70_pp2_stage4_iter0;
wire    ap_block_state75_pp2_stage4_iter1;
wire    ap_block_pp2_stage4_subdone;
wire    ap_CS_fsm_pp2_stage4;
wire    ap_block_pp2_stage2_subdone;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state98;
wire    ap_block_state102_pp3_stage4_iter0;
wire    ap_block_state107_pp3_stage4_iter1;
wire    ap_block_pp3_stage4_subdone;
wire    ap_CS_fsm_pp3_stage4;
wire    ap_block_pp3_stage2_subdone;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state130;
wire    ap_block_state134_pp4_stage4_iter0;
wire    ap_block_state139_pp4_stage4_iter1;
wire    ap_block_pp4_stage4_subdone;
wire    ap_CS_fsm_pp4_stage4;
wire    ap_block_pp4_stage2_subdone;
reg   [8:0] ap_phi_mux_i_phi_fu_185_p4;
wire    ap_block_pp0_stage0;
reg   [8:0] ap_phi_mux_i_1_phi_fu_206_p4;
wire    ap_block_pp1_stage0;
reg   [8:0] ap_phi_mux_i_s_phi_fu_227_p4;
wire    ap_block_pp2_stage0;
reg   [8:0] ap_phi_mux_i_3_phi_fu_248_p4;
wire    ap_block_pp3_stage0;
reg   [8:0] ap_phi_mux_i_4_phi_fu_269_p4;
wire    ap_block_pp4_stage0;
wire   [63:0] tmp_37_cast_fu_375_p1;
wire  signed [63:0] tmp_36_cast_fu_364_p1;
wire  signed [63:0] tmp_46_cast_fu_574_p1;
wire  signed [63:0] tmp_45_cast_fu_563_p1;
wire  signed [63:0] tmp_55_cast_fu_773_p1;
wire  signed [63:0] tmp_54_cast_fu_762_p1;
wire  signed [63:0] tmp_59_cast_fu_972_p1;
wire  signed [63:0] tmp_58_cast_fu_961_p1;
wire  signed [63:0] tmp_63_cast_fu_1171_p1;
wire  signed [63:0] tmp_62_cast_fu_1160_p1;
reg   [63:0] grp_fu_276_p0;
reg   [63:0] grp_fu_276_p1;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_block_pp2_stage3;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_pp3_stage3;
wire    ap_block_pp3_stage3;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_pp4_stage3;
wire    ap_block_pp4_stage3;
wire    ap_CS_fsm_state149;
reg   [63:0] grp_fu_286_p0;
reg   [63:0] grp_fu_286_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state143;
wire    ap_CS_fsm_state154;
reg   [63:0] grp_fu_297_p0;
wire    ap_CS_fsm_state160;
reg  signed [31:0] grp_fu_302_p0;
wire    ap_block_pp0_stage2;
wire    ap_block_pp1_stage2;
wire    ap_block_pp2_stage2;
wire    ap_block_pp3_stage2;
wire    ap_block_pp4_stage2;
wire   [9:0] tmp_35_fu_346_p3;
wire   [11:0] tmp_34_fu_338_p3;
wire   [11:0] p_shl1_cast_fu_354_p1;
wire  signed [11:0] tmp_36_fu_358_p2;
wire   [11:0] tmp_37_fu_369_p2;
wire    ap_block_pp0_stage1;
wire   [16:0] lhs_V_fu_380_p1;
wire   [16:0] rhs_V_fu_384_p1;
wire   [16:0] ret_V_fu_388_p2;
wire   [0:0] abscond_fu_400_p2;
wire   [16:0] neg_fu_394_p2;
wire   [63:0] t_V_fu_418_p1;
wire   [10:0] tmp_V_fu_422_p4;
wire   [51:0] tmp_V_1_fu_432_p1;
wire   [0:0] ymaggreater_fu_448_p2;
wire   [0:0] tmp_i30_i_i_fu_436_p2;
wire   [0:0] tmp_i31_i_i_fu_442_p2;
wire   [0:0] sel_tmp6_i_fu_462_p2;
wire   [63:0] res_fu_454_p3;
wire   [63:0] res_3_i_i_to_int_fu_476_p1;
wire   [10:0] tmp_2_fu_479_p4;
wire   [51:0] tmp_65_fu_489_p1;
wire   [0:0] notrhs1_fu_499_p2;
wire   [0:0] notlhs1_fu_493_p2;
wire   [0:0] tmp_4_fu_505_p2;
wire   [0:0] grp_fu_297_p2;
wire   [0:0] tmp_6_fu_511_p2;
wire   [9:0] tmp_39_fu_545_p3;
wire   [11:0] tmp_38_fu_537_p3;
wire   [11:0] p_shl3_cast_fu_553_p1;
wire  signed [11:0] tmp_45_fu_557_p2;
wire   [11:0] tmp_46_fu_568_p2;
wire    ap_block_pp1_stage1;
wire   [16:0] lhs_V_1_fu_579_p1;
wire   [16:0] rhs_V_1_fu_583_p1;
wire   [16:0] ret_V_1_fu_587_p2;
wire   [0:0] abscond_1_fu_599_p2;
wire   [16:0] neg_1_fu_593_p2;
wire   [63:0] t_V_1_fu_617_p1;
wire   [10:0] tmp_V_2_fu_621_p4;
wire   [51:0] tmp_V_3_fu_631_p1;
wire   [0:0] ymaggreater_1_fu_647_p2;
wire   [0:0] tmp_i30_i_i6_fu_635_p2;
wire   [0:0] tmp_i31_i_i7_fu_641_p2;
wire   [0:0] sel_tmp6_i1_fu_661_p2;
wire   [63:0] res_1_fu_653_p3;
wire   [63:0] res_3_i_i12_to_int_fu_675_p1;
wire   [10:0] tmp_8_fu_678_p4;
wire   [51:0] tmp_67_fu_688_p1;
wire   [0:0] notrhs2_fu_698_p2;
wire   [0:0] notlhs2_fu_692_p2;
wire   [0:0] tmp_10_fu_704_p2;
wire   [0:0] tmp_12_fu_710_p2;
wire   [9:0] tmp_53_fu_744_p3;
wire   [11:0] tmp_52_fu_736_p3;
wire   [11:0] p_shl5_cast_fu_752_p1;
wire  signed [11:0] tmp_54_fu_756_p2;
wire   [11:0] tmp_55_fu_767_p2;
wire    ap_block_pp2_stage1;
wire   [16:0] lhs_V_2_fu_778_p1;
wire   [16:0] rhs_V_2_fu_782_p1;
wire   [16:0] ret_V_2_fu_786_p2;
wire   [0:0] abscond_2_fu_798_p2;
wire   [16:0] neg_2_fu_792_p2;
wire   [63:0] t_V_2_fu_816_p1;
wire   [10:0] tmp_V_4_fu_820_p4;
wire   [51:0] tmp_V_5_fu_830_p1;
wire   [0:0] ymaggreater_2_fu_846_p2;
wire   [0:0] tmp_i30_i_i1_fu_834_p2;
wire   [0:0] tmp_i31_i_i1_fu_840_p2;
wire   [0:0] sel_tmp6_i2_fu_860_p2;
wire   [63:0] res_2_fu_852_p3;
wire   [63:0] res_3_i_i24_to_int_fu_874_p1;
wire   [10:0] tmp_14_fu_877_p4;
wire   [51:0] tmp_69_fu_887_p1;
wire   [0:0] notrhs3_fu_897_p2;
wire   [0:0] notlhs3_fu_891_p2;
wire   [0:0] tmp_16_fu_903_p2;
wire   [0:0] tmp_18_fu_909_p2;
wire   [9:0] tmp_57_fu_943_p3;
wire   [11:0] tmp_56_fu_935_p3;
wire   [11:0] p_shl7_cast_fu_951_p1;
wire  signed [11:0] tmp_58_fu_955_p2;
wire   [11:0] tmp_59_fu_966_p2;
wire    ap_block_pp3_stage1;
wire   [16:0] lhs_V_3_fu_977_p1;
wire   [16:0] rhs_V_3_fu_981_p1;
wire   [16:0] ret_V_3_fu_985_p2;
wire   [0:0] abscond_3_fu_997_p2;
wire   [16:0] neg_3_fu_991_p2;
wire   [63:0] t_V_3_fu_1015_p1;
wire   [10:0] tmp_V_6_fu_1019_p4;
wire   [51:0] tmp_V_7_fu_1029_p1;
wire   [0:0] ymaggreater_3_fu_1045_p2;
wire   [0:0] tmp_i30_i_i2_fu_1033_p2;
wire   [0:0] tmp_i31_i_i2_fu_1039_p2;
wire   [0:0] sel_tmp6_i3_fu_1059_p2;
wire   [63:0] res_3_fu_1051_p3;
wire   [63:0] res_3_i_i36_to_int_fu_1073_p1;
wire   [10:0] tmp_20_fu_1076_p4;
wire   [51:0] tmp_71_fu_1086_p1;
wire   [0:0] notrhs4_fu_1096_p2;
wire   [0:0] notlhs4_fu_1090_p2;
wire   [0:0] tmp_22_fu_1102_p2;
wire   [0:0] tmp_24_fu_1108_p2;
wire   [9:0] tmp_61_fu_1142_p3;
wire   [11:0] tmp_60_fu_1134_p3;
wire   [11:0] p_shl9_cast_fu_1150_p1;
wire  signed [11:0] tmp_62_fu_1154_p2;
wire   [11:0] tmp_63_fu_1165_p2;
wire    ap_block_pp4_stage1;
wire   [16:0] lhs_V_4_fu_1176_p1;
wire   [16:0] rhs_V_4_fu_1180_p1;
wire   [16:0] ret_V_4_fu_1184_p2;
wire   [0:0] abscond_4_fu_1196_p2;
wire   [16:0] neg_4_fu_1190_p2;
wire   [63:0] t_V_4_fu_1214_p1;
wire   [10:0] tmp_V_8_fu_1218_p4;
wire   [51:0] tmp_V_9_fu_1228_p1;
wire   [0:0] notrhs5_fu_1244_p2;
wire   [0:0] notlhs5_fu_1238_p2;
wire   [0:0] tmp_28_fu_1250_p2;
wire   [0:0] tmp_30_fu_1256_p2;
wire   [0:0] ymaggreater_4_fu_1232_p2;
wire   [0:0] tmp_52_4_fu_1262_p2;
wire   [63:0] weight_5_write_assi_fu_1268_p3;
reg   [119:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_state37_pp1_stage3_iter0;
wire    ap_block_state42_pp1_stage3_iter1;
wire    ap_block_pp1_stage3_subdone;
wire    ap_block_pp2_stage1_subdone;
wire    ap_block_state69_pp2_stage3_iter0;
wire    ap_block_state74_pp2_stage3_iter1;
wire    ap_block_pp2_stage3_subdone;
wire    ap_block_pp3_stage1_subdone;
wire    ap_block_state101_pp3_stage3_iter0;
wire    ap_block_state106_pp3_stage3_iter1;
wire    ap_block_pp3_stage3_subdone;
wire    ap_block_pp4_stage1_subdone;
wire    ap_block_state133_pp4_stage3_iter0;
wire    ap_block_state138_pp4_stage3_iter1;
wire    ap_block_pp4_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 120'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
end

Merge_dadd_64ns_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Merge_dadd_64ns_6bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_276_p0),
    .din1(grp_fu_276_p1),
    .ce(1'b1),
    .dout(grp_fu_276_p2)
);

Merge_dmul_64ns_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Merge_dmul_64ns_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_286_p0),
    .din1(grp_fu_286_p1),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

Merge_dcmp_64ns_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
Merge_dcmp_64ns_6dEe_U3(
    .din0(grp_fu_297_p0),
    .din1(64'd4643809350144491520),
    .opcode(5'd2),
    .dout(grp_fu_297_p2)
);

Merge_sitodp_32s_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Merge_sitodp_32s_eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_302_p0),
    .ce(1'b1),
    .dout(grp_fu_302_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state34) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2)))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state66) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state65)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state65)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state98) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state97)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage4_subdone) & (1'b1 == ap_CS_fsm_pp3_stage4))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp3_stage4_subdone) & (1'b1 == ap_CS_fsm_pp3_stage4)) | ((1'b0 == ap_block_pp3_stage2_subdone) & (1'b1 == ap_CS_fsm_pp3_stage2)))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state97)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state130) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state129)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage4_subdone) & (1'b1 == ap_CS_fsm_pp4_stage4))) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp4_stage4_subdone) & (1'b1 == ap_CS_fsm_pp4_stage4)) | ((1'b0 == ap_block_pp4_stage2_subdone) & (1'b1 == ap_CS_fsm_pp4_stage2)))) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state129)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_1_reg_1343 == 1'd0))) begin
        i_1_reg_202 <= i_2_1_reg_1347;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        i_1_reg_202 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_3_reg_1425 == 1'd0))) begin
        i_3_reg_244 <= i_2_3_reg_1429;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        i_3_reg_244 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (exitcond_4_reg_1466 == 1'd0))) begin
        i_4_reg_265 <= i_2_4_reg_1470;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        i_4_reg_265 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_reg_1302 == 1'd0))) begin
        i_reg_181 <= i_2_reg_1306;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_181 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond_2_reg_1384 == 1'd0))) begin
        i_s_reg_223 <= i_2_2_reg_1388;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        i_s_reg_223 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (exitcond_1_reg_1343_pp1_iter2_reg == 1'd0))) begin
        sum_1_1_reg_192 <= grp_fu_276_p2;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        sum_1_1_reg_192 <= res_3_i_i_reg_1331;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (exitcond_2_reg_1384_pp2_iter2_reg == 1'd0))) begin
        sum_1_2_reg_213 <= grp_fu_276_p2;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        sum_1_2_reg_213 <= res_3_i_i1_reg_1372;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage2_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (exitcond_3_reg_1425_pp3_iter2_reg == 1'd0))) begin
        sum_1_3_reg_234 <= grp_fu_276_p2;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        sum_1_3_reg_234 <= res_3_i_i2_reg_1413;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage2_11001) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2) & (exitcond_4_reg_1466_pp4_iter2_reg == 1'd0))) begin
        sum_1_4_reg_255 <= grp_fu_276_p2;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        sum_1_4_reg_255 <= res_3_i_i3_reg_1454;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_reg_1302_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        sum_1_reg_169 <= grp_fu_276_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_1_reg_169 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_1_reg_1343 == 1'd0))) begin
        abs_1_reg_1362 <= abs_1_fu_605_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (exitcond_2_reg_1384 == 1'd0))) begin
        abs_2_reg_1403 <= abs_2_fu_804_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage1_11001) & (1'b1 == ap_CS_fsm_pp3_stage1) & (exitcond_3_reg_1425 == 1'd0))) begin
        abs_3_reg_1444 <= abs_3_fu_1003_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (exitcond_4_reg_1466 == 1'd0))) begin
        abs_4_reg_1485 <= abs_4_fu_1202_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_reg_1302 == 1'd0))) begin
        abs_reg_1321 <= abs_fu_406_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_1_reg_1343 <= exitcond_1_fu_525_p2;
        exitcond_1_reg_1343_pp1_iter1_reg <= exitcond_1_reg_1343;
        exitcond_1_reg_1343_pp1_iter2_reg <= exitcond_1_reg_1343_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond_2_reg_1384 <= exitcond_2_fu_724_p2;
        exitcond_2_reg_1384_pp2_iter1_reg <= exitcond_2_reg_1384;
        exitcond_2_reg_1384_pp2_iter2_reg <= exitcond_2_reg_1384_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond_3_reg_1425 <= exitcond_3_fu_923_p2;
        exitcond_3_reg_1425_pp3_iter1_reg <= exitcond_3_reg_1425;
        exitcond_3_reg_1425_pp3_iter2_reg <= exitcond_3_reg_1425_pp3_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        exitcond_4_reg_1466 <= exitcond_4_fu_1122_p2;
        exitcond_4_reg_1466_pp4_iter1_reg <= exitcond_4_reg_1466;
        exitcond_4_reg_1466_pp4_iter2_reg <= exitcond_4_reg_1466_pp4_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_1302 <= exitcond_fu_326_p2;
        exitcond_reg_1302_pp0_iter1_reg <= exitcond_reg_1302;
        exitcond_reg_1302_pp0_iter2_reg <= exitcond_reg_1302_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_2_1_reg_1347 <= i_2_1_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_2_2_reg_1388 <= i_2_2_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_2_3_reg_1429 <= i_2_3_fu_929_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_2_4_reg_1470 <= i_2_4_fu_1128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_1306 <= i_2_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp4_stage2_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2) & (exitcond_4_reg_1466_pp4_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp3_stage2_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (exitcond_3_reg_1425_pp3_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (exitcond_2_reg_1384_pp2_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (exitcond_1_reg_1343_pp1_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_reg_1302_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_305 <= grp_fu_302_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state153) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state25) | ((1'b0 == ap_block_pp4_stage2_11001) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2) & (exitcond_4_reg_1466_pp4_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp3_stage2_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (exitcond_3_reg_1425_pp3_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp2_stage2_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (exitcond_2_reg_1384_pp2_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (exitcond_1_reg_1343_pp1_iter2_reg == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_reg_1302_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_310 <= grp_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_320 <= grp_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        res_3_i_i1_reg_1372 <= res_3_i_i1_fu_667_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        res_3_i_i2_reg_1413 <= res_3_i_i2_fu_866_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        res_3_i_i3_reg_1454 <= res_3_i_i3_fu_1065_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        res_3_i_i_reg_1331 <= res_3_i_i_fu_468_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        weight_1_write_assi_reg_1338[61 : 52] <= weight_1_write_assi_fu_517_p3[61 : 52];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        weight_2_write_assi_reg_1379[61 : 52] <= weight_2_write_assi_fu_716_p3[61 : 52];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        weight_3_write_assi_reg_1420[61 : 52] <= weight_3_write_assi_fu_915_p3[61 : 52];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        weight_4_write_assi_reg_1461[61 : 52] <= weight_4_write_assi_fu_1114_p3[61 : 52];
    end
end

always @ (*) begin
    if ((exitcond_fu_326_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_1_fu_525_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state34 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state34 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_2_fu_724_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state66 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state66 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_3_fu_923_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state98 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state98 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_4_fu_1122_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state130 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state130 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state160) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_1_reg_1343 == 1'd0))) begin
        ap_phi_mux_i_1_phi_fu_206_p4 = i_2_1_reg_1347;
    end else begin
        ap_phi_mux_i_1_phi_fu_206_p4 = i_1_reg_202;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_3_reg_1425 == 1'd0))) begin
        ap_phi_mux_i_3_phi_fu_248_p4 = i_2_3_reg_1429;
    end else begin
        ap_phi_mux_i_3_phi_fu_248_p4 = i_3_reg_244;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (exitcond_4_reg_1466 == 1'd0))) begin
        ap_phi_mux_i_4_phi_fu_269_p4 = i_2_4_reg_1470;
    end else begin
        ap_phi_mux_i_4_phi_fu_269_p4 = i_4_reg_265;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_reg_1302 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_185_p4 = i_2_reg_1306;
    end else begin
        ap_phi_mux_i_phi_fu_185_p4 = i_reg_181;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond_2_reg_1384 == 1'd0))) begin
        ap_phi_mux_i_s_phi_fu_227_p4 = i_2_2_reg_1388;
    end else begin
        ap_phi_mux_i_s_phi_fu_227_p4 = i_s_reg_223;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage3) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        grp_fu_276_p0 = sum_1_4_reg_255;
    end else if (((1'b0 == ap_block_pp3_stage3) & (1'b1 == ap_CS_fsm_pp3_stage3) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        grp_fu_276_p0 = sum_1_3_reg_234;
    end else if (((1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        grp_fu_276_p0 = sum_1_2_reg_213;
    end else if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_276_p0 = sum_1_1_reg_192;
    end else if (((1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_276_p0 = reg_320;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_276_p0 = sum_1_reg_169;
    end else begin
        grp_fu_276_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_276_p1 = 64'd13845191154443747328;
    end else if ((((1'b0 == ap_block_pp4_stage3) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp3_stage3) & (1'b1 == ap_CS_fsm_pp3_stage3) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        grp_fu_276_p1 = reg_305;
    end else begin
        grp_fu_276_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_fu_286_p0 = sum_1_4_reg_255;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_fu_286_p0 = sum_1_3_reg_234;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_fu_286_p0 = sum_1_2_reg_213;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_286_p0 = sum_1_1_reg_192;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state58))) begin
        grp_fu_286_p0 = reg_310;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_286_p0 = sum_1_reg_169;
    end else begin
        grp_fu_286_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state58))) begin
        grp_fu_286_p1 = 64'd4593671619917905920;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state47))) begin
        grp_fu_286_p1 = 64'd4571153621781053440;
    end else begin
        grp_fu_286_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        grp_fu_297_p0 = reg_320;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        grp_fu_297_p0 = res_3_i_i3_reg_1454;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_297_p0 = res_3_i_i2_reg_1413;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_297_p0 = res_3_i_i1_reg_1372;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_297_p0 = res_3_i_i_reg_1331;
    end else begin
        grp_fu_297_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2) & (1'b0 == ap_block_pp4_stage2))) begin
        grp_fu_302_p0 = tmp_56_7_fu_1210_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        grp_fu_302_p0 = tmp_56_6_fu_1011_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2))) begin
        grp_fu_302_p0 = tmp_56_5_fu_812_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2))) begin
        grp_fu_302_p0 = tmp_56_s_fu_613_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_302_p0 = tmp_64_fu_414_p1;
    end else begin
        grp_fu_302_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        imgs_V_address0 = tmp_63_cast_fu_1171_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        imgs_V_address0 = tmp_59_cast_fu_972_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        imgs_V_address0 = tmp_55_cast_fu_773_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        imgs_V_address0 = tmp_46_cast_fu_574_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_V_address0 = tmp_37_cast_fu_375_p1;
    end else begin
        imgs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        imgs_V_address1 = tmp_62_cast_fu_1160_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        imgs_V_address1 = tmp_58_cast_fu_961_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        imgs_V_address1 = tmp_54_cast_fu_762_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        imgs_V_address1 = tmp_45_cast_fu_563_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgs_V_address1 = tmp_36_cast_fu_364_p1;
    end else begin
        imgs_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        imgs_V_ce0 = 1'b1;
    end else begin
        imgs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        imgs_V_ce1 = 1'b1;
    end else begin
        imgs_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_326_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_326_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_1_fu_525_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_1_fu_525_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((~((1'b0 == ap_block_pp1_stage2_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) & (1'b0 == ap_block_pp1_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else if (((1'b0 == ap_block_pp1_stage2_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_2_fu_724_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_2_fu_724_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((~((1'b0 == ap_block_pp2_stage2_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2)) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else if (((1'b0 == ap_block_pp2_stage2_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_pp2_stage4 : begin
            if ((1'b0 == ap_block_pp2_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_3_fu_923_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_3_fu_923_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((~((1'b0 == ap_block_pp3_stage2_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2)) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else if (((1'b0 == ap_block_pp3_stage2_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((1'b0 == ap_block_pp3_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_pp3_stage4 : begin
            if ((1'b0 == ap_block_pp3_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (exitcond_4_fu_1122_p2 == 1'd1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1)) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else if (((1'b0 == ap_block_pp4_stage0_subdone) & (exitcond_4_fu_1122_p2 == 1'd1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state143;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((1'b0 == ap_block_pp4_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_pp4_stage2 : begin
            if ((~((1'b0 == ap_block_pp4_stage2_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2)) & (1'b0 == ap_block_pp4_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end else if (((1'b0 == ap_block_pp4_stage2_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state143;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end
        end
        ap_ST_fsm_pp4_stage3 : begin
            if ((1'b0 == ap_block_pp4_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end
        end
        ap_ST_fsm_pp4_stage4 : begin
            if ((1'b0 == ap_block_pp4_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage4;
            end
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_1_fu_605_p3 = ((abscond_1_fu_599_p2[0:0] === 1'b1) ? ret_V_1_fu_587_p2 : neg_1_fu_593_p2);

assign abs_2_fu_804_p3 = ((abscond_2_fu_798_p2[0:0] === 1'b1) ? ret_V_2_fu_786_p2 : neg_2_fu_792_p2);

assign abs_3_fu_1003_p3 = ((abscond_3_fu_997_p2[0:0] === 1'b1) ? ret_V_3_fu_985_p2 : neg_3_fu_991_p2);

assign abs_4_fu_1202_p3 = ((abscond_4_fu_1196_p2[0:0] === 1'b1) ? ret_V_4_fu_1184_p2 : neg_4_fu_1190_p2);

assign abs_fu_406_p3 = ((abscond_fu_400_p2[0:0] === 1'b1) ? ret_V_fu_388_p2 : neg_fu_394_p2);

assign abscond_1_fu_599_p2 = (($signed(ret_V_1_fu_587_p2) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign abscond_2_fu_798_p2 = (($signed(ret_V_2_fu_786_p2) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign abscond_3_fu_997_p2 = (($signed(ret_V_3_fu_985_p2) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign abscond_4_fu_1196_p2 = (($signed(ret_V_4_fu_1184_p2) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_400_p2 = (($signed(ret_V_fu_388_p2) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_pp2_stage4 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_pp3_stage3 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_pp3_stage4 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_pp4_stage2 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_pp4_stage3 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_pp4_stage4 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd72];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state100_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp3_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp3_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp3_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp3_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp3_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp3_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp3_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state130_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state131_pp4_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state132_pp4_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state133_pp4_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state134_pp4_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state135_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state136_pp4_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state137_pp4_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state138_pp4_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state139_pp4_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state140_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state141_pp4_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state142_pp4_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp1_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp2_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp2_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp2_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp2_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_return_0 = weight_1_write_assi_reg_1338;

assign ap_return_1 = weight_2_write_assi_reg_1379;

assign ap_return_2 = weight_3_write_assi_reg_1420;

assign ap_return_3 = weight_4_write_assi_reg_1461;

assign ap_return_4 = weight_5_write_assi_fu_1268_p3;

assign exitcond_1_fu_525_p2 = ((ap_phi_mux_i_1_phi_fu_206_p4 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_2_fu_724_p2 = ((ap_phi_mux_i_s_phi_fu_227_p4 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_3_fu_923_p2 = ((ap_phi_mux_i_3_phi_fu_248_p4 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_4_fu_1122_p2 = ((ap_phi_mux_i_4_phi_fu_269_p4 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_fu_326_p2 = ((ap_phi_mux_i_phi_fu_185_p4 == 9'd256) ? 1'b1 : 1'b0);

assign i_2_1_fu_531_p2 = (ap_phi_mux_i_1_phi_fu_206_p4 + 9'd1);

assign i_2_2_fu_730_p2 = (ap_phi_mux_i_s_phi_fu_227_p4 + 9'd1);

assign i_2_3_fu_929_p2 = (ap_phi_mux_i_3_phi_fu_248_p4 + 9'd1);

assign i_2_4_fu_1128_p2 = (ap_phi_mux_i_4_phi_fu_269_p4 + 9'd1);

assign i_2_fu_332_p2 = (ap_phi_mux_i_phi_fu_185_p4 + 9'd1);

assign lhs_V_1_fu_579_p1 = imgs_V_q0;

assign lhs_V_2_fu_778_p1 = imgs_V_q0;

assign lhs_V_3_fu_977_p1 = imgs_V_q0;

assign lhs_V_4_fu_1176_p1 = imgs_V_q0;

assign lhs_V_fu_380_p1 = imgs_V_q0;

assign neg_1_fu_593_p2 = (17'd0 - ret_V_1_fu_587_p2);

assign neg_2_fu_792_p2 = (17'd0 - ret_V_2_fu_786_p2);

assign neg_3_fu_991_p2 = (17'd0 - ret_V_3_fu_985_p2);

assign neg_4_fu_1190_p2 = (17'd0 - ret_V_4_fu_1184_p2);

assign neg_fu_394_p2 = (17'd0 - ret_V_fu_388_p2);

assign notlhs1_fu_493_p2 = ((tmp_2_fu_479_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs2_fu_692_p2 = ((tmp_8_fu_678_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs3_fu_891_p2 = ((tmp_14_fu_877_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs4_fu_1090_p2 = ((tmp_20_fu_1076_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs5_fu_1238_p2 = ((tmp_V_8_fu_1218_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notrhs1_fu_499_p2 = ((tmp_65_fu_489_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_698_p2 = ((tmp_67_fu_688_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs3_fu_897_p2 = ((tmp_69_fu_887_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs4_fu_1096_p2 = ((tmp_71_fu_1086_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs5_fu_1244_p2 = ((tmp_V_9_fu_1228_p1 == 52'd0) ? 1'b1 : 1'b0);

assign p_shl1_cast_fu_354_p1 = tmp_35_fu_346_p3;

assign p_shl3_cast_fu_553_p1 = tmp_39_fu_545_p3;

assign p_shl5_cast_fu_752_p1 = tmp_53_fu_744_p3;

assign p_shl7_cast_fu_951_p1 = tmp_57_fu_943_p3;

assign p_shl9_cast_fu_1150_p1 = tmp_61_fu_1142_p3;

assign res_1_fu_653_p3 = ((ymaggreater_1_fu_647_p2[0:0] === 1'b1) ? reg_320 : 64'd4607182418800017408);

assign res_2_fu_852_p3 = ((ymaggreater_2_fu_846_p2[0:0] === 1'b1) ? reg_320 : 64'd4607182418800017408);

assign res_3_fu_1051_p3 = ((ymaggreater_3_fu_1045_p2[0:0] === 1'b1) ? reg_320 : 64'd4607182418800017408);

assign res_3_i_i12_to_int_fu_675_p1 = res_3_i_i1_reg_1372;

assign res_3_i_i1_fu_667_p3 = ((sel_tmp6_i1_fu_661_p2[0:0] === 1'b1) ? 64'd4607182418800017408 : res_1_fu_653_p3);

assign res_3_i_i24_to_int_fu_874_p1 = res_3_i_i2_reg_1413;

assign res_3_i_i2_fu_866_p3 = ((sel_tmp6_i2_fu_860_p2[0:0] === 1'b1) ? 64'd4607182418800017408 : res_2_fu_852_p3);

assign res_3_i_i36_to_int_fu_1073_p1 = res_3_i_i3_reg_1454;

assign res_3_i_i3_fu_1065_p3 = ((sel_tmp6_i3_fu_1059_p2[0:0] === 1'b1) ? 64'd4607182418800017408 : res_3_fu_1051_p3);

assign res_3_i_i_fu_468_p3 = ((sel_tmp6_i_fu_462_p2[0:0] === 1'b1) ? 64'd4607182418800017408 : res_fu_454_p3);

assign res_3_i_i_to_int_fu_476_p1 = res_3_i_i_reg_1331;

assign res_fu_454_p3 = ((ymaggreater_fu_448_p2[0:0] === 1'b1) ? reg_320 : 64'd4607182418800017408);

assign ret_V_1_fu_587_p2 = (lhs_V_1_fu_579_p1 - rhs_V_1_fu_583_p1);

assign ret_V_2_fu_786_p2 = (lhs_V_2_fu_778_p1 - rhs_V_2_fu_782_p1);

assign ret_V_3_fu_985_p2 = (lhs_V_3_fu_977_p1 - rhs_V_3_fu_981_p1);

assign ret_V_4_fu_1184_p2 = (lhs_V_4_fu_1176_p1 - rhs_V_4_fu_1180_p1);

assign ret_V_fu_388_p2 = (lhs_V_fu_380_p1 - rhs_V_fu_384_p1);

assign rhs_V_1_fu_583_p1 = imgs_V_q1;

assign rhs_V_2_fu_782_p1 = imgs_V_q1;

assign rhs_V_3_fu_981_p1 = imgs_V_q1;

assign rhs_V_4_fu_1180_p1 = imgs_V_q1;

assign rhs_V_fu_384_p1 = imgs_V_q1;

assign sel_tmp6_i1_fu_661_p2 = (tmp_i31_i_i7_fu_641_p2 & tmp_i30_i_i6_fu_635_p2);

assign sel_tmp6_i2_fu_860_p2 = (tmp_i31_i_i1_fu_840_p2 & tmp_i30_i_i1_fu_834_p2);

assign sel_tmp6_i3_fu_1059_p2 = (tmp_i31_i_i2_fu_1039_p2 & tmp_i30_i_i2_fu_1033_p2);

assign sel_tmp6_i_fu_462_p2 = (tmp_i31_i_i_fu_442_p2 & tmp_i30_i_i_fu_436_p2);

assign t_V_1_fu_617_p1 = reg_320;

assign t_V_2_fu_816_p1 = reg_320;

assign t_V_3_fu_1015_p1 = reg_320;

assign t_V_4_fu_1214_p1 = reg_320;

assign t_V_fu_418_p1 = reg_320;

assign tmp_10_fu_704_p2 = (notrhs2_fu_698_p2 | notlhs2_fu_692_p2);

assign tmp_12_fu_710_p2 = (tmp_10_fu_704_p2 & grp_fu_297_p2);

assign tmp_14_fu_877_p4 = {{res_3_i_i24_to_int_fu_874_p1[62:52]}};

assign tmp_16_fu_903_p2 = (notrhs3_fu_897_p2 | notlhs3_fu_891_p2);

assign tmp_18_fu_909_p2 = (tmp_16_fu_903_p2 & grp_fu_297_p2);

assign tmp_20_fu_1076_p4 = {{res_3_i_i36_to_int_fu_1073_p1[62:52]}};

assign tmp_22_fu_1102_p2 = (notrhs4_fu_1096_p2 | notlhs4_fu_1090_p2);

assign tmp_24_fu_1108_p2 = (tmp_22_fu_1102_p2 & grp_fu_297_p2);

assign tmp_28_fu_1250_p2 = (notrhs5_fu_1244_p2 | notlhs5_fu_1238_p2);

assign tmp_2_fu_479_p4 = {{res_3_i_i_to_int_fu_476_p1[62:52]}};

assign tmp_30_fu_1256_p2 = (tmp_28_fu_1250_p2 & grp_fu_297_p2);

assign tmp_34_fu_338_p3 = {{ap_phi_mux_i_phi_fu_185_p4}, {3'd0}};

assign tmp_35_fu_346_p3 = {{ap_phi_mux_i_phi_fu_185_p4}, {1'd0}};

assign tmp_36_cast_fu_364_p1 = tmp_36_fu_358_p2;

assign tmp_36_fu_358_p2 = (tmp_34_fu_338_p3 - p_shl1_cast_fu_354_p1);

assign tmp_37_cast_fu_375_p1 = tmp_37_fu_369_p2;

assign tmp_37_fu_369_p2 = (tmp_36_fu_358_p2 | 12'd1);

assign tmp_38_fu_537_p3 = {{ap_phi_mux_i_1_phi_fu_206_p4}, {3'd0}};

assign tmp_39_fu_545_p3 = {{ap_phi_mux_i_1_phi_fu_206_p4}, {1'd0}};

assign tmp_45_cast_fu_563_p1 = tmp_45_fu_557_p2;

assign tmp_45_fu_557_p2 = (tmp_38_fu_537_p3 - p_shl3_cast_fu_553_p1);

assign tmp_46_cast_fu_574_p1 = $signed(tmp_46_fu_568_p2);

assign tmp_46_fu_568_p2 = ($signed(tmp_45_fu_557_p2) + $signed(12'd2));

assign tmp_4_fu_505_p2 = (notrhs1_fu_499_p2 | notlhs1_fu_493_p2);

assign tmp_52_4_fu_1262_p2 = (ymaggreater_4_fu_1232_p2 & tmp_30_fu_1256_p2);

assign tmp_52_fu_736_p3 = {{ap_phi_mux_i_s_phi_fu_227_p4}, {3'd0}};

assign tmp_53_fu_744_p3 = {{ap_phi_mux_i_s_phi_fu_227_p4}, {1'd0}};

assign tmp_54_cast_fu_762_p1 = tmp_54_fu_756_p2;

assign tmp_54_fu_756_p2 = (tmp_52_fu_736_p3 - p_shl5_cast_fu_752_p1);

assign tmp_55_cast_fu_773_p1 = $signed(tmp_55_fu_767_p2);

assign tmp_55_fu_767_p2 = ($signed(tmp_54_fu_756_p2) + $signed(12'd3));

assign tmp_56_5_fu_812_p1 = $signed(abs_2_reg_1403);

assign tmp_56_6_fu_1011_p1 = $signed(abs_3_reg_1444);

assign tmp_56_7_fu_1210_p1 = $signed(abs_4_reg_1485);

assign tmp_56_fu_935_p3 = {{ap_phi_mux_i_3_phi_fu_248_p4}, {3'd0}};

assign tmp_56_s_fu_613_p1 = $signed(abs_1_reg_1362);

assign tmp_57_fu_943_p3 = {{ap_phi_mux_i_3_phi_fu_248_p4}, {1'd0}};

assign tmp_58_cast_fu_961_p1 = tmp_58_fu_955_p2;

assign tmp_58_fu_955_p2 = (tmp_56_fu_935_p3 - p_shl7_cast_fu_951_p1);

assign tmp_59_cast_fu_972_p1 = $signed(tmp_59_fu_966_p2);

assign tmp_59_fu_966_p2 = ($signed(tmp_58_fu_955_p2) + $signed(12'd4));

assign tmp_60_fu_1134_p3 = {{ap_phi_mux_i_4_phi_fu_269_p4}, {3'd0}};

assign tmp_61_fu_1142_p3 = {{ap_phi_mux_i_4_phi_fu_269_p4}, {1'd0}};

assign tmp_62_cast_fu_1160_p1 = tmp_62_fu_1154_p2;

assign tmp_62_fu_1154_p2 = (tmp_60_fu_1134_p3 - p_shl9_cast_fu_1150_p1);

assign tmp_63_cast_fu_1171_p1 = $signed(tmp_63_fu_1165_p2);

assign tmp_63_fu_1165_p2 = ($signed(tmp_62_fu_1154_p2) + $signed(12'd5));

assign tmp_64_fu_414_p1 = $signed(abs_reg_1321);

assign tmp_65_fu_489_p1 = res_3_i_i_to_int_fu_476_p1[51:0];

assign tmp_67_fu_688_p1 = res_3_i_i12_to_int_fu_675_p1[51:0];

assign tmp_69_fu_887_p1 = res_3_i_i24_to_int_fu_874_p1[51:0];

assign tmp_6_fu_511_p2 = (tmp_4_fu_505_p2 & grp_fu_297_p2);

assign tmp_71_fu_1086_p1 = res_3_i_i36_to_int_fu_1073_p1[51:0];

assign tmp_8_fu_678_p4 = {{res_3_i_i12_to_int_fu_675_p1[62:52]}};

assign tmp_V_1_fu_432_p1 = t_V_fu_418_p1[51:0];

assign tmp_V_2_fu_621_p4 = {{t_V_1_fu_617_p1[62:52]}};

assign tmp_V_3_fu_631_p1 = t_V_1_fu_617_p1[51:0];

assign tmp_V_4_fu_820_p4 = {{t_V_2_fu_816_p1[62:52]}};

assign tmp_V_5_fu_830_p1 = t_V_2_fu_816_p1[51:0];

assign tmp_V_6_fu_1019_p4 = {{t_V_3_fu_1015_p1[62:52]}};

assign tmp_V_7_fu_1029_p1 = t_V_3_fu_1015_p1[51:0];

assign tmp_V_8_fu_1218_p4 = {{t_V_4_fu_1214_p1[62:52]}};

assign tmp_V_9_fu_1228_p1 = t_V_4_fu_1214_p1[51:0];

assign tmp_V_fu_422_p4 = {{t_V_fu_418_p1[62:52]}};

assign tmp_i30_i_i1_fu_834_p2 = ((tmp_V_4_fu_820_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign tmp_i30_i_i2_fu_1033_p2 = ((tmp_V_6_fu_1019_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign tmp_i30_i_i6_fu_635_p2 = ((tmp_V_2_fu_621_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign tmp_i30_i_i_fu_436_p2 = ((tmp_V_fu_422_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign tmp_i31_i_i1_fu_840_p2 = ((tmp_V_5_fu_830_p1 != 52'd0) ? 1'b1 : 1'b0);

assign tmp_i31_i_i2_fu_1039_p2 = ((tmp_V_7_fu_1029_p1 != 52'd0) ? 1'b1 : 1'b0);

assign tmp_i31_i_i7_fu_641_p2 = ((tmp_V_3_fu_631_p1 != 52'd0) ? 1'b1 : 1'b0);

assign tmp_i31_i_i_fu_442_p2 = ((tmp_V_1_fu_432_p1 != 52'd0) ? 1'b1 : 1'b0);

assign weight_1_write_assi_fu_517_p3 = ((tmp_6_fu_511_p2[0:0] === 1'b1) ? 64'd0 : 64'd4607182418800017408);

assign weight_2_write_assi_fu_716_p3 = ((tmp_12_fu_710_p2[0:0] === 1'b1) ? 64'd0 : 64'd4607182418800017408);

assign weight_3_write_assi_fu_915_p3 = ((tmp_18_fu_909_p2[0:0] === 1'b1) ? 64'd0 : 64'd4607182418800017408);

assign weight_4_write_assi_fu_1114_p3 = ((tmp_24_fu_1108_p2[0:0] === 1'b1) ? 64'd0 : 64'd4607182418800017408);

assign weight_5_write_assi_fu_1268_p3 = ((tmp_52_4_fu_1262_p2[0:0] === 1'b1) ? 64'd0 : 64'd4607182418800017408);

assign ymaggreater_1_fu_647_p2 = (($signed(t_V_1_fu_617_p1) > $signed(64'd4607182418800017408)) ? 1'b1 : 1'b0);

assign ymaggreater_2_fu_846_p2 = (($signed(t_V_2_fu_816_p1) > $signed(64'd4607182418800017408)) ? 1'b1 : 1'b0);

assign ymaggreater_3_fu_1045_p2 = (($signed(t_V_3_fu_1015_p1) > $signed(64'd4607182418800017408)) ? 1'b1 : 1'b0);

assign ymaggreater_4_fu_1232_p2 = (($signed(t_V_4_fu_1214_p1) > $signed(64'd4607182418800017408)) ? 1'b1 : 1'b0);

assign ymaggreater_fu_448_p2 = (($signed(t_V_fu_418_p1) > $signed(64'd4607182418800017408)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    weight_1_write_assi_reg_1338[51:0] <= 52'b0000000000000000000000000000000000000000000000000000;
    weight_1_write_assi_reg_1338[63:62] <= 2'b00;
    weight_2_write_assi_reg_1379[51:0] <= 52'b0000000000000000000000000000000000000000000000000000;
    weight_2_write_assi_reg_1379[63:62] <= 2'b00;
    weight_3_write_assi_reg_1420[51:0] <= 52'b0000000000000000000000000000000000000000000000000000;
    weight_3_write_assi_reg_1420[63:62] <= 2'b00;
    weight_4_write_assi_reg_1461[51:0] <= 52'b0000000000000000000000000000000000000000000000000000;
    weight_4_write_assi_reg_1461[63:62] <= 2'b00;
end

endmodule //cal_weight
