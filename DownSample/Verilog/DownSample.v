// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DownSample,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.495000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=11,HLS_SYN_FF=920,HLS_SYN_LUT=1514,HLS_VERSION=2018_3}" *)

module DownSample (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgs_V_address0,
        imgs_V_ce0,
        imgs_V_q0,
        imgs_V_address1,
        imgs_V_ce1,
        imgs_V_q1,
        L0_V_address0,
        L0_V_ce0,
        L0_V_we0,
        L0_V_d0,
        L0_V_q0,
        L1_V_address0,
        L1_V_ce0,
        L1_V_we0,
        L1_V_d0,
        L1_V_q0,
        L2_V,
        L2_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] imgs_V_address0;
output   imgs_V_ce0;
input  [15:0] imgs_V_q0;
output  [10:0] imgs_V_address1;
output   imgs_V_ce1;
input  [15:0] imgs_V_q1;
output  [8:0] L0_V_address0;
output   L0_V_ce0;
output   L0_V_we0;
output  [15:0] L0_V_d0;
input  [15:0] L0_V_q0;
output  [4:0] L1_V_address0;
output   L1_V_ce0;
output   L1_V_we0;
output  [15:0] L1_V_d0;
input  [15:0] L1_V_q0;
output  [15:0] L2_V;
output   L2_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] imgs_V_address0;
reg imgs_V_ce0;
reg[10:0] imgs_V_address1;
reg imgs_V_ce1;
reg[8:0] L0_V_address0;
reg L0_V_ce0;
reg L0_V_we0;
reg[4:0] L1_V_address0;
reg L1_V_ce0;
reg L1_V_we0;
reg L2_V_ap_vld;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] Guass_kernel_V_address0;
reg    Guass_kernel_V_ce0;
wire   [3:0] Guass_kernel_V_q0;
wire   [8:0] next_mul_fu_292_p2;
reg   [8:0] next_mul_reg_655;
wire    ap_CS_fsm_state2;
wire   [4:0] i_fu_304_p2;
reg   [4:0] i_reg_663;
wire   [11:0] tmp_s_fu_322_p2;
reg   [11:0] tmp_s_reg_668;
wire   [0:0] exitcond1_i_fu_298_p2;
wire   [11:0] tmp_24_fu_338_p2;
reg   [11:0] tmp_24_reg_674;
wire   [4:0] j_fu_355_p2;
reg   [4:0] j_reg_690;
wire    ap_CS_fsm_state3;
wire   [8:0] tmp_30_fu_365_p2;
reg   [8:0] tmp_30_reg_695;
wire   [0:0] exitcond_i_fu_349_p2;
wire   [11:0] tmp_33_fu_413_p2;
reg   [11:0] tmp_33_reg_710;
wire   [11:0] tmp_34_fu_418_p2;
reg   [11:0] tmp_34_reg_715;
wire   [16:0] ret_V_fu_431_p2;
reg   [16:0] ret_V_reg_720;
wire    ap_CS_fsm_state4;
reg   [15:0] p_i_reg_735;
wire    ap_CS_fsm_state5;
wire   [2:0] i_2_fu_488_p2;
reg   [2:0] i_2_reg_743;
wire    ap_CS_fsm_state8;
wire   [4:0] k_fu_494_p2;
reg   [4:0] k_reg_748;
wire   [0:0] exitcond2_i_fu_482_p2;
wire   [5:0] tmp_29_fu_516_p2;
reg   [5:0] tmp_29_reg_753;
wire   [64:0] mul_fu_526_p2;
reg   [64:0] mul_reg_758;
reg   [0:0] tmp_reg_763;
reg   [24:0] tmp_25_reg_769;
wire   [2:0] j_2_fu_556_p2;
reg   [2:0] j_2_reg_777;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond_i6_fu_550_p2;
wire   [4:0] tmp_2_i1_fu_581_p2;
reg   [4:0] tmp_2_i1_reg_792;
wire   [4:0] indvars_iv_next_i_fu_587_p2;
reg   [15:0] L1_V_load_reg_802;
wire    ap_CS_fsm_state10;
reg   [3:0] Guass_kernel_V_load_reg_807;
wire    grp_Guass_down4_1_fu_279_ap_start;
wire    grp_Guass_down4_1_fu_279_ap_done;
wire    grp_Guass_down4_1_fu_279_ap_idle;
wire    grp_Guass_down4_1_fu_279_ap_ready;
wire   [8:0] grp_Guass_down4_1_fu_279_imgs_V_address0;
wire    grp_Guass_down4_1_fu_279_imgs_V_ce0;
wire   [4:0] grp_Guass_down4_1_fu_279_output_V_address0;
wire    grp_Guass_down4_1_fu_279_output_V_ce0;
wire    grp_Guass_down4_1_fu_279_output_V_we0;
wire   [15:0] grp_Guass_down4_1_fu_279_output_V_d0;
reg   [4:0] i_i_reg_189;
reg   [8:0] phi_mul_reg_200;
reg   [4:0] j_i_reg_212;
wire    ap_CS_fsm_state6;
reg   [4:0] indvars_iv_i_reg_223;
wire    ap_CS_fsm_state7;
reg   [4:0] k_i_reg_235;
reg   [2:0] i_i3_reg_247;
reg   [4:0] k_1_i_reg_258;
wire    ap_CS_fsm_state11;
reg   [2:0] j_i5_reg_268;
reg    grp_Guass_down4_1_fu_279_ap_start_reg;
wire  signed [63:0] tmp_38_cast_fu_388_p1;
wire  signed [63:0] tmp_39_cast_fu_398_p1;
wire  signed [63:0] tmp_40_cast_fu_437_p1;
wire  signed [63:0] tmp_41_cast_fu_441_p1;
wire   [63:0] tmp_37_cast_fu_478_p1;
wire   [63:0] tmp_42_cast_fu_571_p1;
wire   [63:0] tmp_1_i8_fu_576_p1;
reg   [31:0] sum_3_fu_98;
wire   [31:0] grp_fu_646_p3;
wire    ap_CS_fsm_state12;
wire   [5:0] tmp_1_i_fu_310_p3;
wire   [5:0] tmp_s_fu_322_p0;
wire   [5:0] tmp_3_i_fu_328_p2;
wire   [5:0] tmp_24_fu_338_p0;
wire   [8:0] tmp_6_i_cast_fu_361_p1;
wire   [5:0] tmp_7_i_fu_371_p3;
wire   [11:0] tmp_8_i_cast_fu_379_p1;
wire   [11:0] tmp_31_fu_383_p2;
wire   [11:0] tmp_32_fu_393_p2;
wire   [5:0] tmp_i_fu_403_p2;
wire   [11:0] tmp_5_i_cast_fu_409_p1;
wire   [16:0] lhs_V_fu_423_p1;
wire   [16:0] rhs_V_fu_427_p1;
wire   [17:0] lhs_V_1_fu_445_p1;
wire   [17:0] rhs_V_1_fu_448_p1;
wire   [17:0] ret_V_1_fu_452_p2;
wire   [17:0] rhs_V_2_cast_fu_458_p1;
wire   [17:0] ret_V_2_fu_462_p2;
wire   [4:0] tmp_28_fu_504_p3;
wire   [5:0] tmp_i4_cast_fu_500_p1;
wire   [5:0] p_shl_cast_fu_512_p1;
wire  signed [31:0] sext_cast_fu_522_p0;
wire  signed [31:0] mul_fu_526_p1;
wire  signed [31:0] tmp_fu_532_p1;
wire   [5:0] tmp_i7_cast_fu_562_p1;
wire   [5:0] tmp_35_fu_566_p2;
wire   [64:0] neg_mul_fu_603_p2;
wire   [24:0] tmp_23_fu_608_p4;
wire   [24:0] p_v_v_fu_618_p3;
wire   [15:0] tmp_26_fu_624_p1;
wire   [15:0] neg_ti_fu_628_p2;
wire   [15:0] tmp_27_fu_634_p1;
wire   [3:0] grp_fu_646_p0;
wire   [15:0] grp_fu_646_p1;
reg   [11:0] ap_NS_fsm;
wire   [19:0] grp_fu_646_p00;
wire   [19:0] grp_fu_646_p10;
wire   [11:0] tmp_24_fu_338_p00;
wire   [11:0] tmp_s_fu_322_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_Guass_down4_1_fu_279_ap_start_reg = 1'b0;
end

Guass_down4_1_Guabkb #(
    .DataWidth( 4 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
Guass_kernel_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Guass_kernel_V_address0),
    .ce0(Guass_kernel_V_ce0),
    .q0(Guass_kernel_V_q0)
);

Guass_down4_1 grp_Guass_down4_1_fu_279(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Guass_down4_1_fu_279_ap_start),
    .ap_done(grp_Guass_down4_1_fu_279_ap_done),
    .ap_idle(grp_Guass_down4_1_fu_279_ap_idle),
    .ap_ready(grp_Guass_down4_1_fu_279_ap_ready),
    .imgs_V_address0(grp_Guass_down4_1_fu_279_imgs_V_address0),
    .imgs_V_ce0(grp_Guass_down4_1_fu_279_imgs_V_ce0),
    .imgs_V_q0(L0_V_q0),
    .output_V_address0(grp_Guass_down4_1_fu_279_output_V_address0),
    .output_V_ce0(grp_Guass_down4_1_fu_279_output_V_ce0),
    .output_V_we0(grp_Guass_down4_1_fu_279_output_V_we0),
    .output_V_d0(grp_Guass_down4_1_fu_279_output_V_d0)
);

DownSample_mac_mufYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DownSample_mac_mufYi_U8(
    .din0(grp_fu_646_p0),
    .din1(grp_fu_646_p1),
    .din2(sum_3_fu_98),
    .dout(grp_fu_646_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Guass_down4_1_fu_279_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond1_i_fu_298_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_Guass_down4_1_fu_279_ap_start_reg <= 1'b1;
        end else if ((grp_Guass_down4_1_fu_279_ap_ready == 1'b1)) begin
            grp_Guass_down4_1_fu_279_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_Guass_down4_1_fu_279_ap_done == 1'b1))) begin
        i_i3_reg_247 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond_i6_fu_550_p2 == 1'd1))) begin
        i_i3_reg_247 <= i_2_reg_743;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_i_reg_189 <= i_reg_663;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_i_reg_189 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_Guass_down4_1_fu_279_ap_done == 1'b1))) begin
        indvars_iv_i_reg_223 <= 5'd5;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond_i6_fu_550_p2 == 1'd1))) begin
        indvars_iv_i_reg_223 <= indvars_iv_next_i_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_i5_reg_268 <= j_2_reg_777;
    end else if (((exitcond2_i_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j_i5_reg_268 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_i_reg_212 <= j_reg_690;
    end else if (((exitcond1_i_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_212 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_1_i_reg_258 <= tmp_2_i1_reg_792;
    end else if (((exitcond2_i_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        k_1_i_reg_258 <= k_i_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_Guass_down4_1_fu_279_ap_done == 1'b1))) begin
        k_i_reg_235 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond_i6_fu_550_p2 == 1'd1))) begin
        k_i_reg_235 <= k_reg_748;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_200 <= next_mul_reg_655;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_200 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sum_3_fu_98 <= grp_fu_646_p3;
    end else if (((exitcond1_i_fu_298_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_3_fu_98 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Guass_kernel_V_load_reg_807 <= Guass_kernel_V_q0;
        L1_V_load_reg_802 <= L1_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_2_reg_743 <= i_2_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_663 <= i_fu_304_p2;
        next_mul_reg_655 <= next_mul_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_2_reg_777 <= j_2_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_690 <= j_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        k_reg_748 <= k_fu_494_p2;
        tmp_29_reg_753 <= tmp_29_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond2_i_fu_482_p2 == 1'd1))) begin
        mul_reg_758 <= mul_fu_526_p2;
        tmp_25_reg_769 <= {{mul_fu_526_p2[64:40]}};
        tmp_reg_763 <= tmp_fu_532_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_i_reg_735 <= {{ret_V_2_fu_462_p2[17:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_V_reg_720 <= ret_V_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_24_reg_674[11 : 1] <= tmp_24_fu_338_p2[11 : 1];
        tmp_s_reg_668[11 : 1] <= tmp_s_fu_322_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i6_fu_550_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_2_i1_reg_792 <= tmp_2_i1_fu_581_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_30_reg_695 <= tmp_30_fu_365_p2;
        tmp_33_reg_710[11 : 1] <= tmp_33_fu_413_p2[11 : 1];
        tmp_34_reg_715[11 : 1] <= tmp_34_fu_418_p2[11 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Guass_kernel_V_address0 = tmp_1_i8_fu_576_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        Guass_kernel_V_address0 = 5'd0;
    end else begin
        Guass_kernel_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Guass_kernel_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        Guass_kernel_V_ce0 = 1'b0;
    end else begin
        Guass_kernel_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        L0_V_address0 = tmp_37_cast_fu_478_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        L0_V_address0 = grp_Guass_down4_1_fu_279_imgs_V_address0;
    end else begin
        L0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        L0_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        L0_V_ce0 = grp_Guass_down4_1_fu_279_imgs_V_ce0;
    end else begin
        L0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        L0_V_we0 = 1'b1;
    end else begin
        L0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        L1_V_address0 = tmp_42_cast_fu_571_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        L1_V_address0 = grp_Guass_down4_1_fu_279_output_V_address0;
    end else begin
        L1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        L1_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        L1_V_ce0 = grp_Guass_down4_1_fu_279_output_V_ce0;
    end else begin
        L1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        L1_V_we0 = grp_Guass_down4_1_fu_279_output_V_we0;
    end else begin
        L1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        L2_V_ap_vld = 1'b1;
    end else begin
        L2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_V_address0 = tmp_40_cast_fu_437_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        imgs_V_address0 = tmp_38_cast_fu_388_p1;
    end else begin
        imgs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        imgs_V_address1 = tmp_41_cast_fu_441_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        imgs_V_address1 = tmp_39_cast_fu_398_p1;
    end else begin
        imgs_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        imgs_V_ce0 = 1'b1;
    end else begin
        imgs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        imgs_V_ce1 = 1'b1;
    end else begin
        imgs_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_i_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_i_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_Guass_down4_1_fu_279_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond2_i_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond_i6_fu_550_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L0_V_d0 = p_i_reg_735;

assign L1_V_d0 = grp_Guass_down4_1_fu_279_output_V_d0;

assign L2_V = ((tmp_reg_763[0:0] === 1'b1) ? neg_ti_fu_628_p2 : tmp_27_fu_634_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_i_fu_298_p2 = ((i_i_reg_189 == 5'd21) ? 1'b1 : 1'b0);

assign exitcond2_i_fu_482_p2 = ((i_i3_reg_247 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_i6_fu_550_p2 = ((k_1_i_reg_258 == indvars_iv_i_reg_223) ? 1'b1 : 1'b0);

assign exitcond_i_fu_349_p2 = ((j_i_reg_212 == 5'd21) ? 1'b1 : 1'b0);

assign grp_Guass_down4_1_fu_279_ap_start = grp_Guass_down4_1_fu_279_ap_start_reg;

assign grp_fu_646_p0 = grp_fu_646_p00;

assign grp_fu_646_p00 = Guass_kernel_V_load_reg_807;

assign grp_fu_646_p1 = grp_fu_646_p10;

assign grp_fu_646_p10 = L1_V_load_reg_802;

assign i_2_fu_488_p2 = (i_i3_reg_247 + 3'd1);

assign i_fu_304_p2 = (i_i_reg_189 + 5'd1);

assign indvars_iv_next_i_fu_587_p2 = (indvars_iv_i_reg_223 + 5'd5);

assign j_2_fu_556_p2 = (j_i5_reg_268 + 3'd1);

assign j_fu_355_p2 = (j_i_reg_212 + 5'd1);

assign k_fu_494_p2 = (k_i_reg_235 + 5'd5);

assign lhs_V_1_fu_445_p1 = ret_V_reg_720;

assign lhs_V_fu_423_p1 = imgs_V_q0;

assign mul_fu_526_p1 = sext_cast_fu_522_p0;

assign mul_fu_526_p2 = ($signed({{1'b0}, {65'd6915167471}}) * $signed(mul_fu_526_p1));

assign neg_mul_fu_603_p2 = (65'd0 - mul_reg_758);

assign neg_ti_fu_628_p2 = (16'd0 - tmp_26_fu_624_p1);

assign next_mul_fu_292_p2 = (phi_mul_reg_200 + 9'd21);

assign p_shl_cast_fu_512_p1 = tmp_28_fu_504_p3;

assign p_v_v_fu_618_p3 = ((tmp_reg_763[0:0] === 1'b1) ? tmp_23_fu_608_p4 : tmp_25_reg_769);

assign ret_V_1_fu_452_p2 = (lhs_V_1_fu_445_p1 + rhs_V_1_fu_448_p1);

assign ret_V_2_fu_462_p2 = (ret_V_1_fu_452_p2 + rhs_V_2_cast_fu_458_p1);

assign ret_V_fu_431_p2 = (lhs_V_fu_423_p1 + rhs_V_fu_427_p1);

assign rhs_V_1_fu_448_p1 = imgs_V_q0;

assign rhs_V_2_cast_fu_458_p1 = imgs_V_q1;

assign rhs_V_fu_427_p1 = imgs_V_q1;

assign sext_cast_fu_522_p0 = sum_3_fu_98;

assign tmp_1_i8_fu_576_p1 = k_1_i_reg_258;

assign tmp_1_i_fu_310_p3 = {{i_i_reg_189}, {1'd0}};

assign tmp_23_fu_608_p4 = {{neg_mul_fu_603_p2[64:40]}};

assign tmp_24_fu_338_p0 = tmp_24_fu_338_p00;

assign tmp_24_fu_338_p00 = tmp_3_i_fu_328_p2;

assign tmp_24_fu_338_p2 = (tmp_24_fu_338_p0 * $signed('h2A));

assign tmp_26_fu_624_p1 = p_v_v_fu_618_p3[15:0];

assign tmp_27_fu_634_p1 = p_v_v_fu_618_p3[15:0];

assign tmp_28_fu_504_p3 = {{i_i3_reg_247}, {2'd0}};

assign tmp_29_fu_516_p2 = (tmp_i4_cast_fu_500_p1 + p_shl_cast_fu_512_p1);

assign tmp_2_i1_fu_581_p2 = (k_1_i_reg_258 + 5'd1);

assign tmp_30_fu_365_p2 = (tmp_6_i_cast_fu_361_p1 + phi_mul_reg_200);

assign tmp_31_fu_383_p2 = (tmp_8_i_cast_fu_379_p1 + tmp_s_reg_668);

assign tmp_32_fu_393_p2 = (tmp_8_i_cast_fu_379_p1 + tmp_24_reg_674);

assign tmp_33_fu_413_p2 = (tmp_5_i_cast_fu_409_p1 + tmp_s_reg_668);

assign tmp_34_fu_418_p2 = (tmp_5_i_cast_fu_409_p1 + tmp_24_reg_674);

assign tmp_35_fu_566_p2 = (tmp_29_reg_753 + tmp_i7_cast_fu_562_p1);

assign tmp_37_cast_fu_478_p1 = tmp_30_reg_695;

assign tmp_38_cast_fu_388_p1 = $signed(tmp_31_fu_383_p2);

assign tmp_39_cast_fu_398_p1 = $signed(tmp_32_fu_393_p2);

assign tmp_3_i_fu_328_p2 = (tmp_1_i_fu_310_p3 | 6'd1);

assign tmp_40_cast_fu_437_p1 = $signed(tmp_33_reg_710);

assign tmp_41_cast_fu_441_p1 = $signed(tmp_34_reg_715);

assign tmp_42_cast_fu_571_p1 = tmp_35_fu_566_p2;

assign tmp_5_i_cast_fu_409_p1 = tmp_i_fu_403_p2;

assign tmp_6_i_cast_fu_361_p1 = j_i_reg_212;

assign tmp_7_i_fu_371_p3 = {{j_i_reg_212}, {1'd0}};

assign tmp_8_i_cast_fu_379_p1 = tmp_7_i_fu_371_p3;

assign tmp_fu_532_p1 = sum_3_fu_98;

assign tmp_i4_cast_fu_500_p1 = i_i3_reg_247;

assign tmp_i7_cast_fu_562_p1 = j_i5_reg_268;

assign tmp_i_fu_403_p2 = (tmp_7_i_fu_371_p3 | 6'd1);

assign tmp_s_fu_322_p0 = tmp_s_fu_322_p00;

assign tmp_s_fu_322_p00 = tmp_1_i_fu_310_p3;

assign tmp_s_fu_322_p2 = (tmp_s_fu_322_p0 * $signed('h2A));

always @ (posedge ap_clk) begin
    tmp_s_reg_668[0] <= 1'b0;
    tmp_24_reg_674[0] <= 1'b0;
    tmp_33_reg_710[0] <= 1'b1;
    tmp_34_reg_715[0] <= 1'b1;
end

endmodule //DownSample
